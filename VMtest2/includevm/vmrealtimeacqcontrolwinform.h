/****************************************************************************
**
** Namespace VmRealTimeAcqControlWinform generated by dumpcpp v5.9.9 using
** dumpcpp {FED63791-1D4F-4F7A-89AA-A8F34F951AD8}

****************************************************************************/

#ifndef QAX_DUMPCPP_VMREALTIMEACQCONTROLWINFORM_H
#define QAX_DUMPCPP_VMREALTIMEACQCONTROLWINFORM_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef VMREALTIMEACQCONTROLWINFORM_EXPORT
#define VMREALTIMEACQCONTROLWINFORM_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace
namespace System {
    class ISite;
}

namespace mscorlib {
    class _Type;
    class _EventHandler;
}

Q_DECLARE_OPAQUE_POINTER(System::ISite*)
Q_DECLARE_OPAQUE_POINTER(mscorlib::_Type*)
Q_DECLARE_OPAQUE_POINTER(mscorlib::_EventHandler*)

namespace VmRealTimeAcqControlWinform {

// forward declarations
    struct RealTimeAcqInput;
    struct RealTimeAcqInput;

class VMREALTIMEACQCONTROLWINFORM_EXPORT VmRealTimeAcqControlInterface : public QAxObject
{
public:
    VmRealTimeAcqControlInterface(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /**
     * @brief 释放控件资源
	 * @remarks 控件销毁前调用一次
     */
    inline void Dispose();

    /**
     * @par 说明
     * 初始化
	 * @return 内部信息
     */
    inline qlonglong GetObjectPointer();

    /**
     * @par 说明
     * 设置实时取流配置信息
	 * @param pData [in] 实时取流配置信息
     */
    inline void SetParamsInfo(qlonglong pData);

    /**
     * @par 说明
     * 显示取图控制按钮
	 * @param bFlag [in] false 隐藏按钮  true 显示按钮
     */
    inline void ShowButton(bool bFlag);

	/**
     * @par 说明
     * 开始取图
     */
    inline void StartGrabbing();

	/**
     * @par 说明
     * 停止取图
     */
    inline void StopGrabbing();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// Actual coclasses
class VMREALTIMEACQCONTROLWINFORM_EXPORT VmRealTimeAcqControlWinform : public QAxWidget
{
public:
    VmRealTimeAcqControlWinform(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{4919fa4c-f224-4c1e-917c-89b7f37aae00}"));
    }

    VmRealTimeAcqControlWinform(VmRealTimeAcqControlInterface *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Handle
    */
    inline int Handle() const; //Returns the value of Handle

    /*
    Property Site
    */
    inline System::ISite* Site() const; //Returns the value of Site
    inline void SetSite(System::ISite* value); //Sets the value of the Site property

    /*
    Property ToString
    */
    inline QString ToString() const; //Returns the value of ToString

    /*
    Method Dispose
    */
    inline void Dispose();

    /*
    Method Equals
    */
    inline bool Equals(const QVariant& obj);

    /*
    Method GetHashCode
    */
    inline int GetHashCode();

    /*
    Method GetObjectPointer
    */
    inline qlonglong GetObjectPointer();

    /*
    Method GetType
    */
    inline mscorlib::_Type* GetType();

    /*
    Method SetParamsInfo
    */
    inline void SetParamsInfo(qlonglong pData);

    /*
    Method ShowButton
    */
    inline void ShowButton(bool bFlag);

    /*
    Method StartGrabbing
    */
    inline void StartGrabbing();

    /*
    Method StopGrabbing
    */
    inline void StopGrabbing();

    /*
    Method add_Disposed
    */
    inline void add_Disposed(mscorlib::_EventHandler* value);

    /*
    Method remove_Disposed
    */
    inline void remove_Disposed(mscorlib::_EventHandler* value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_VMREALTIMEACQCONTROLWINFORM_NOINLINES
inline void VmRealTimeAcqControlInterface::Dispose()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline qlonglong VmRealTimeAcqControlInterface::GetObjectPointer()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void VmRealTimeAcqControlInterface::SetParamsInfo(qlonglong pData)
{
    void *_a[] = {0, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void VmRealTimeAcqControlInterface::ShowButton(bool bFlag)
{
    void *_a[] = {0, (void*)&bFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void VmRealTimeAcqControlInterface::StartGrabbing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void VmRealTimeAcqControlInterface::StopGrabbing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline int VmRealTimeAcqControlWinform::Handle() const
{
    QVariant qax_result = property("Handle");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline System::ISite* VmRealTimeAcqControlWinform::Site() const
{
#ifdef QAX_DUMPCPP_SYSTEM_H
    System::ISite* qax_pointer = 0;
    qRegisterMetaType<System::ISite*>("System::ISite*", &qax_pointer);
    qRegisterMetaType<System::ISite>("System::ISite", qax_pointer);
    QVariant qax_result = property("Site");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(System::ISite**)qax_result.constData();
#else
    return 0; // foreign namespace not included
#endif
}
inline void VmRealTimeAcqControlWinform::SetSite(System::ISite* value){
    int typeId = qRegisterMetaType<System::ISite*>("System::ISite*", &value);
    setProperty("Site", QVariant(typeId, &value));
}

inline QString VmRealTimeAcqControlWinform::ToString() const
{
    QVariant qax_result = property("ToString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void VmRealTimeAcqControlWinform::Dispose()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline bool VmRealTimeAcqControlWinform::Equals(const QVariant& obj)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline int VmRealTimeAcqControlWinform::GetHashCode()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline qlonglong VmRealTimeAcqControlWinform::GetObjectPointer()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline mscorlib::_Type* VmRealTimeAcqControlWinform::GetType()
{
    mscorlib::_Type* qax_result = 0;
#ifdef QAX_DUMPCPP_MSCORLIB_H
    qRegisterMetaType<mscorlib::_Type*>("mscorlib::_Type*", &qax_result);
    qRegisterMetaType<mscorlib::_Type>("mscorlib::_Type", qax_result);
#endif
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline void VmRealTimeAcqControlWinform::SetParamsInfo(qlonglong pData)
{
    void *_a[] = {0, (void*)&pData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void VmRealTimeAcqControlWinform::ShowButton(bool bFlag)
{
    void *_a[] = {0, (void*)&bFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void VmRealTimeAcqControlWinform::StartGrabbing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void VmRealTimeAcqControlWinform::StopGrabbing()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void VmRealTimeAcqControlWinform::add_Disposed(mscorlib::_EventHandler* value)
{
    void *_a[] = {0, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void VmRealTimeAcqControlWinform::remove_Disposed(mscorlib::_EventHandler* value)
{
    void *_a[] = {0, (void*)&value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface*>(t)->VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface::~VmRealTimeAcqControlInterface();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VmRealTimeAcqControlWinform::VmRealTimeAcqControlInterface*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<VmRealTimeAcqControlWinform::VmRealTimeAcqControlWinform, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<VmRealTimeAcqControlWinform::VmRealTimeAcqControlWinform*>(t)->VmRealTimeAcqControlWinform::~VmRealTimeAcqControlWinform();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) VmRealTimeAcqControlWinform::VmRealTimeAcqControlWinform;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const VmRealTimeAcqControlWinform::VmRealTimeAcqControlWinform*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<VmRealTimeAcqControlWinform::VmRealTimeAcqControlWinform*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

